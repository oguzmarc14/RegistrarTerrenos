<div
  class="relative flex justify-center items-center min-h-screen bg-cover bg-center bg-no-repeat px-4"
  style="background-image: url('/header1.webp')"
>
  <!-- Overlay oscuro para mejorar contraste -->
  <div class="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>

  <!-- Contenedor del contenido con z-index para estar encima -->
  <div class="relative z-10 w-full max-w-md">
    <h1 class="text-3xl md:text-4xl font-bold text-white text-center mb-8 drop-shadow">
      Agregar terreno
    </h1>

    <div class="bg-blue-950/90 backdrop-blur-md rounded-2xl shadow-2xl p-6 md:p-8 space-y-6">
      <form
        id="formularioTerreno"
        class="space-y-4"
        enctype="multipart/form-data"
      >
        <input
          name="titulo"
          placeholder="Nombre del terreno"
          required
          class="w-full border border-white/20 bg-white/10 text-white placeholder-white/60 p-3 rounded focus:outline-none focus:ring-2 focus:ring-amber-600 transition"
        />
        <textarea
          name="descripcion"
          placeholder="Descripción"
          required
          class="w-full border border-white/20 bg-white/10 text-white placeholder-white/60 p-3 rounded resize-none focus:outline-none focus:ring-2 focus:ring-amber-600 transition"
        ></textarea>
        <input
          name="precio"
          type="number"
          placeholder="Precio"  
          required
          class="w-full border border-white/20 bg-white/10 text-white placeholder-white/60 p-3 rounded focus:outline-none focus:ring-2 focus:ring-amber-600 transition"
        />
        <input
          name="medidas"
          placeholder="Medidas (Ej. 120x60)"
          class="w-full border border-white/20 bg-white/10 text-white placeholder-white/60 p-3 rounded focus:outline-none focus:ring-2 focus:ring-amber-600 transition"
        />
        <input
          name="ubicacion"
          placeholder="Ubicación"
          class="w-full border border-white/20 bg-white/10 text-white placeholder-white/60 p-3 rounded focus:outline-none focus:ring-2 focus:ring-amber-600 transition"
        />

        <div class="flex flex-col items-center space-y-2">
          <input
            type="file"
            id="imagen"
            name="imagenes"
            accept="image/*"
            required
            multiple
            class="hidden"
          />
          <label
            for="imagen"
            class="bg-blue-0 text-white px-5 py-2 rounded-md cursor-pointer hover:bg-blue-900 transition"
          >
            Seleccionar imagen
          </label>
          <div
            id="previewContainer"
            class="mt-2 flex gap-2 flex-wrap justify-center"
          ></div>
        </div>

        <button
          type="submit"
          id="botonSubmit"
          disabled
          class="bg-green-700 text-white px-6 py-3 rounded-md block mx-auto opacity-50 cursor-not-allowed transition"
        >
          Subir terreno
        </button>
      </form>
    </div>
  </div>
</div>

<!-- Script -->
<!-- en lugar de src="/src/scripts/RegistrarTerreno.ts" -->
<script type="module">
  import { createClient } from 'https://esm.sh/@supabase/supabase-js';

  const supabase = createClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_KEY
  );

  const form = document.getElementById('formularioTerreno');
  const inputImagen = document.getElementById('imagen');
  const previewContainer = document.getElementById('previewContainer');
  const boton = document.getElementById('botonSubmit');
  const inputs = form ? Array.from(form.querySelectorAll('input, textarea')) : [];

  inputImagen?.addEventListener('change', () => {
    if (previewContainer) previewContainer.innerHTML = '';
    if (inputImagen.files && inputImagen.files.length > 0) {
      Array.from(inputImagen.files).forEach((archivo) => {
        const reader = new FileReader();
        reader.onload = function (e) {
          const img = document.createElement('img');
          img.src = e.target?.result;
          img.className = 'max-w-[100px] max-h-[100px] rounded shadow';
          previewContainer?.appendChild(img);
        };
        reader.readAsDataURL(archivo);
      });
    }
    verificarCampos();
  });

  function verificarCampos() {
    const todosLlenos = inputs.every((input) => {
      if (input.type === 'file') return input.files && input.files.length > 0;
      return input.value.trim() !== '';
    });
    if (boton) {
      boton.disabled = !todosLlenos;
      boton.classList.toggle('opacity-50', !todosLlenos);
      boton.classList.toggle('cursor-not-allowed', !todosLlenos);
      boton.classList.toggle('cursor-pointer', todosLlenos);
    }
  }

  inputs.forEach((input) => {
    input.addEventListener('input', verificarCampos);
    if (input.type === 'file') input.addEventListener('change', verificarCampos);
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const files = inputImagen?.files;
    if (!files || files.length === 0) {
      alert('❌ No hay imágenes seleccionadas');
      return;
    }
    const urls = [];
    for (let i = 0; i < Math.min(files.length, 5); i++) {
      const file = files[i];
      const { data, error } = await supabase.storage
        .from('terrenos-imagenes')
        .upload(`terrenos/${Date.now()}-${file.name}`, file);
      if (error) {
        alert('❌ Error subiendo imagen');
        console.error(error);
        return;
      }
      if (data?.path) {
        const { data: publicUrlData } = supabase.storage
          .from('terrenos-imagenes')
          .getPublicUrl(data.path);
        if (publicUrlData?.publicUrl) urls.push(publicUrlData.publicUrl);
      }
    }
    const { error: insertError } = await supabase.from('Terrenos').insert({
      titulo: formData.get('titulo'),
      descripcion: formData.get('descripcion'),
      precio: Number(formData.get('precio')),
      medidas: formData.get('medidas'),
      ubicacion: formData.get('ubicacion'),
      fecha: new Date().toISOString(),
      imagenes: urls,
    });
    if (insertError) {
      alert('❌ Error guardando terreno');
      console.error(insertError);
      return;
    }
    alert(`✅ Terreno guardado con ${urls.length} imagen${urls.length !== 1 ? 'es' : ''}`);
    form.reset();
    if (previewContainer) previewContainer.innerHTML = '';
    verificarCampos();
  });
</script>